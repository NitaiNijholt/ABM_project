import numpy as np
from agent import Agent
from grid import Grid
from matplotlib import pyplot as plt

class ModifiedAgent(Agent):
    def __init__(self, age, agent_id, position, grid, wealth=0, wood=0, stone=0):
        super().__init__(agent_id, position, grid, wealth=0, wood=0, stone=0)
        self.age = age

    # Note: All these parameters should be defined in the simulation class later.
    def expected_income_building(self, income_per_house, time_cost_building, helper_func=lambda x: 1 / (1 + np.exp(-x)), expected_age=80, time_considered=50):
        """
        Calculate the expected income of building a house.

        Parameters
        ----------
        income_per_house : float
            The income generated by a house.
        time_cost_building : float
            The time cost of building a house.
        helper_func : Callable
            cdf(death) = helper_func(age - expected_age).
            Default is sigmoid function
        expected_age : float
            The expected age of death.
        time_considered : float
            The time considered for the expected income.

        Returns
        -------
        float
            The expected income of building a house each year in the considered time period.
        """
        # Calculate the cdf of death
        death_cdf = np.array([helper_func(age - expected_age) for age in range(self.age + time_cost_building, self.age + time_cost_building + time_considered)])

        # For debugging
        plt.figure()
        plt.plot(range(self.age, self.age + time_considered), death_cdf)
        plt.xlabel('Age')
        plt.ylabel('CDF')
        plt.show()

        # live_cdf = 1 - death_cdf, and use this as weights to calculate the expected income
        return np.sum((1 - death_cdf) * income_per_house) / time_considered


width, height = 10, 10
age = 10
agent_id = 1
position = (5, 5)

grid = Grid(width, height)
agent = ModifiedAgent(age, agent_id, position, grid)

income_per_house = 1
time_cost_building = 1
helper_func = lambda x: 1 / (1 + np.exp(-0.3*x))
expected_income = agent.expected_income_building(income_per_house, time_cost_building, helper_func=helper_func)
print(expected_income)